@model solution_MVC_Arthouse.Models.Artwork

@{
    ViewBag.Title = "Edit";
}

<h2>Edit @Model.Summary</h2>


@using (Html.BeginForm("Edit", "Artworks", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>Artwork</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.ID)
        @Html.HiddenFor(model => model.RowVersion)

        <div>
            @{ 
                if(Model.imageContent != null && Model.imageMimeType.Contains("image"))
                {
                    string imageBase64 = Convert.ToBase64String(Model.imageContent);
                    string imageSrc = string.Format("data:" + Model.imageMimeType + ";base64, {0}", imageBase64);
                    <img src="@imageSrc" style="max-height:500px; max-width:600px" class="img-responsive img-rounded"/>
                    <br/>
                    <input type="checkbox" id="chkRemoveImage" name="chkRemoveImage"/><strong>Check To Remove Image</strong>
                }
            }
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.imageFileName, htmlAttributes: new { @class = "control-label col-md-2"})
            <div class="col-md-10">
                <label class=""> @Model.imageFileName</label>
                Replace With: <input type="file" class="" name="newPicture"/>
                <br/>
            </div>

        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Started, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Started, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Started, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Finished, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Finished, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Finished, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control", @rows = "5" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Value, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Value, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Value, "", new { @class = "text-danger" })
            </div>
        </div>

        <div>
            @{
                if (Model.imageContent != null && Model.imageMimeType.Contains("file"))
                {
                    string imageBase64 = Convert.ToBase64String(Model.imageContent);
                    string imageSrc = string.Format("data:" + Model.imageMimeType + ";base64, {0}", imageBase64);
                    <a href="@imageSrc"></a>
                    <br />
                    <input type="checkbox" id="chkRemoveFile" name="chkRemoveFile" /><strong>Check To Remove File</strong>
                }
            }
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.imageFileName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <label class=""> @Model.imageFileName</label>
                Replace With: <input type="file" class="" name="newPicture" />
                <br />
            </div>

        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ArtistID, "Artist", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("ArtistID", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.ArtistID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ArtTypeID, "Type of Art", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("ArtTypeID", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.ArtTypeID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List of Artworks", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
